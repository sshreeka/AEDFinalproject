/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.Quarantine;

import Business.EcoSystem;
import Business.HealthCheck.DocVisit;
import Business.HealthCheck.DocVisitHistory;
import Business.HealthCheck.VitalSignCheck;
import Business.HealthCheck.VitalSigns;
import Business.Person.Person;
import Business.Quarantine.Quarantine;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.util.Random;
import javax.swing.JOptionPane;
import userinterface.TestingCenter.doTestJPanel;

/**
 *
 * @author Nikhil
 */
public class QuarantineJPanel extends javax.swing.JPanel {

    /**
     * Creates new form QuarantineJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    
    public QuarantineJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
       // populateTable();
                   // populateTable();
                        //populateNTable();
      polulateDischargeTable();
      populatePositiveTable();
       populateNegativeTable();

        }

         

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        networkTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        networkTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        networkTable2 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        networkTable3 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        networkTable4 = new javax.swing.JTable();

        setBackground(new java.awt.Color(234, 230, 251));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        networkTable.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        networkTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Body Temp", "Oxygen"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(networkTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 460, 583, 120));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setText("QUARANTINE FACILITY");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 10, 310, -1));

        jButton1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton1.setText("Positive Patients Vital Check");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 123, -1, -1));

        networkTable1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        networkTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Address", "Vaccination", "Test Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(networkTable1);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 589, 91));

        jButton2.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton2.setText("Check for Critical");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 420, -1, -1));
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(596, 101, -1, -1));

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel4.setText("Negative Quarantine");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 60, -1, -1));

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel5.setText("Positive Quarantine");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 67, -1, -1));

        networkTable2.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        networkTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Address", "Vaccination", "Test Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(networkTable2);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 160, 610, 92));

        jButton3.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton3.setText("Negative Patients Vital Check");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 120, -1, -1));

        networkTable3.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        networkTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Body Temp", "Oxygen"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(networkTable3);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 460, 610, 120));

        jButton4.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton4.setText("Check for Non Critical");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 420, -1, -1));

        jButton5.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton5.setText("Test Positive Patients");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(394, 123, -1, -1));

        jButton6.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton6.setText("Test Negative Patients");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 120, -1, -1));

        jButton7.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton7.setText("Refresh");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 120, -1, -1));

        jButton8.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton8.setText("Discharge Patients");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 650, -1, -1));

        networkTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Address", "Vaccination", "Travelling", "Status", "Discharge date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(networkTable4);

        add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 710, 960, 91));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = networkTable1.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select a row from the table to view details","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{
            
           DefaultTableModel model = (DefaultTableModel) networkTable1.getModel();

           Person person = (Person)model.getValueAt(selectedRow, 0);
           
          doVitalCheckJPanel doVital =new doVitalCheckJPanel(userProcessContainer, userAccount,business,person);
            userProcessContainer.add("Perform Vital check",doVital);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }                           
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model = (DefaultTableModel) networkTable.getModel();
        
        model.setRowCount(0);
        
        for(Person cust:business.getPersonDirectory().getCustList()){       
                    
            if ( (cust.getO2()< 90) && (cust.getTemp()> 103)){
                cust.setCritical("Critical");
                cust.setStatus("Admitted");
           Object[] row = new Object[3];
           row[0] = cust;
 row[1] =  cust.getTemp();
row[2] =  cust.getO2();
                            
                            model.addRow(row);
              
                    
        }}
        populatePositiveTable();
               populateNegativeTable();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
                
        int selectedRow = networkTable2.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select a row from the table to view details","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{
            
           DefaultTableModel model = (DefaultTableModel) networkTable2.getModel();

           Person person = (Person)model.getValueAt(selectedRow, 0);
           
          doVitalCheckJPanel doVital =new doVitalCheckJPanel(userProcessContainer, userAccount,business,person);
            userProcessContainer.add("Perform Vital check",doVital);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }    
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
                DefaultTableModel model = (DefaultTableModel) networkTable3.getModel();
        
        model.setRowCount(0);
        
        for(Person cust:business.getPersonDirectory().getCustList()){       

if ( ((cust.getO2()> 90) && (cust.getO2()<= 94 )) && ((cust.getTemp()>= 101) && (cust.getTemp()<= 103))){

               cust.setCritical("Non Critical");
    cust.setStatus("Admitted");
Object[] row = new Object[3];
row[0] = cust;
row[1] =  cust.getTemp();
row[2] =  cust.getO2();
model.addRow(row);
              
                    
        }}
        
        populatePositiveTable();
        populateNegativeTable();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        int selectedRow = networkTable1.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select a row from the table to view details","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{

            DefaultTableModel model = (DefaultTableModel) networkTable1.getModel();
            Person person = (Person)model.getValueAt(selectedRow, 0);
            doTestQuarantineJPanel doTest =new doTestQuarantineJPanel(userProcessContainer, business,person);
            userProcessContainer.add("Manage Covid test",doTest);
            CardLayout layout=(CardLayout)userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        populateTable();

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        
                int selectedRow = networkTable2.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select a row from the table to view details","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{

            DefaultTableModel model = (DefaultTableModel) networkTable2.getModel();
            Person person = (Person)model.getValueAt(selectedRow, 0);
            doTestQuarantineJPanel doTest =new doTestQuarantineJPanel(userProcessContainer, business,person);
            userProcessContainer.add("Manage Covid test",doTest);
            CardLayout layout=(CardLayout)userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        populateNTable();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
//                populateTable();
//                        populateNTable();
        polulateDischargeTable();

      populatePositiveTable();
       populateNegativeTable();

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:

        JOptionPane.showMessageDialog(null,"Discharging patients with good oxygen level with no fever");
        for(Person cust:business.getPersonDirectory().getCustList()){
                if ( (cust.getO2()>= 95 && cust.getTemp()<= 98) && cust.getTestResult().equals("Negative") &&  (cust.getStatus().equals("Quarantined"))){
                    cust.setO2(96);
                    cust.setTemp(97);
                    cust.setTestResult("Negative");
                    cust.setRecovered("yes");
                    cust.setStatus("Can exit Quarantine Facility");
                }}
        polulateDischargeTable();
      populatePositiveTable();
       populateNegativeTable();



    }//GEN-LAST:event_jButton8ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable networkTable;
    private javax.swing.JTable networkTable1;
    private javax.swing.JTable networkTable2;
    private javax.swing.JTable networkTable3;
    private javax.swing.JTable networkTable4;
    // End of variables declaration//GEN-END:variables

    private void populatePositiveTable() {
                   DefaultTableModel model = (DefaultTableModel) networkTable1.getModel();
     
        model.setRowCount(0);

        for(Person cust:business.getPersonDirectory().getCustList()){    
               if ((cust.getTestResult().equals("Positive")) && (cust.getStatus().equals("Quarantined"))){                    
                Object[] row = new Object[10];
                row[0] = cust;
                row[1] = cust.getAddress();
                row[2] = cust.getVaccinationStatus();
                row[3] = cust.getTestResult();
                model.addRow(row);
   
                  }
    }
    }
//
    private void populateNegativeTable() {
                   DefaultTableModel model = (DefaultTableModel) networkTable2.getModel();
    
        model.setRowCount(0);

        for(Person cust:business.getPersonDirectory().getCustList()){    
               if ((cust.getTestResult().equals("Negative")) && (cust.getTravelling().equals("International")) && (cust.getStatus().equals("Quarantined")) ){
                    
                Object[] row = new Object[4];
                row[0] = cust;
                row[1] = cust.getAddress();
                row[2] = cust.getVaccinationStatus();
                row[3] = cust.getTestResult();
                model.addRow(row);
   
                  }
    }
    }

  private void populateTable() {
                   DefaultTableModel model = (DefaultTableModel) networkTable1.getModel();
     
        model.setRowCount(0);
        Random rand = new Random();

        for(Person cust:business.getPersonDirectory().getCustList()){    
            int  room_num = 0;
               if (cust.getTestResult() == "Positive"){
          
                Object[] row = new Object[10];
                row[0] = cust;
                row[1] = cust.getAddress();
                row[2] = cust.getVaccinationStatus();
                row[3] = cust.getTestResult();
                row[4] = cust.getCritical();
                model.addRow(row);
                  }
        }}    
      private void populateNTable() {
                   DefaultTableModel model = (DefaultTableModel) networkTable2.getModel();
     
        model.setRowCount(0);
        Random rand = new Random();

        for(Person cust:business.getPersonDirectory().getCustList()){    
            int  room_num = 0;
               if (cust.getTestResult() == "Negative"){
          
                Object[] row = new Object[10];
                row[0] = cust;
                row[1] = cust.getAddress();
                row[2] = cust.getVaccinationStatus();
                row[3] = cust.getTestResult();
                row[4] = cust.getCritical();
                model.addRow(row);
                  }
        }}    

    private void polulateDischargeTable() {
        DefaultTableModel model = (DefaultTableModel) networkTable4.getModel();
        
        model.setRowCount(0);
           Date date = new Date(); 
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");

        for(Person cust:business.getPersonDirectory().getCustList()){       
                  if (cust.getStatus().equals("Can exit Quarantine Facility")){
                        Object[] row = new Object[6];
                        row[0] = cust;
                row[1] = cust.getAddress();
                row[2] = cust.getVaccinationStatus();
                row[3] = cust.getTravelling();
                row[4] = cust.getStatus();
                row[5] = formatter.format(date);
                             model.addRow(row);
    }
        }
    }
    
}